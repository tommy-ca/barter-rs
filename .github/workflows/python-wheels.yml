name: "Build Python Wheels"

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint:
    name: "Lint and format"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          cd barter-python
          uv sync --dev
      - name: Run ruff
        run: |
          cd barter-python
          uv run ruff check . --fix
          uv run ruff format . --check
      - name: Run rustfmt
        run: cargo fmt --check
      - name: Run clippy
        run: cargo clippy -- -D warnings

  build:
    name: "Wheel build (${{ matrix.target }} | py${{ matrix.python }})"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            python: "3.9"
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            python: "3.10"
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            python: "3.11"
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            python: "3.12"
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            python: "3.13"

          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            python: "3.9"
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            python: "3.10"
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            python: "3.11"

          # Linux musl x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            python: "3.9"
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            python: "3.11"

          # macOS x86_64
          - os: macos-13
            target: x86_64-apple-darwin
            python: "3.9"
          - os: macos-13
            target: x86_64-apple-darwin
            python: "3.10"
          - os: macos-13
            target: x86_64-apple-darwin
            python: "3.11"
          - os: macos-13
            target: x86_64-apple-darwin
            python: "3.12"

          # macOS ARM64
          - os: macos-14
            target: aarch64-apple-darwin
            python: "3.9"
          - os: macos-14
            target: aarch64-apple-darwin
            python: "3.11"

          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            python: "3.9"
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            python: "3.10"
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            python: "3.11"
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            python: "3.12"

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust builds
        uses: Swatinem/rust-cache@v2

      - name: Install maturin
        run: python -m pip install --upgrade pip maturin
        working-directory: barter-python

      - name: Build wheel
        run: |
          maturin build --release --strip --target ${{ matrix.target }}
        working-directory: barter-python

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: barter-python-${{ matrix.target }}-py${{ matrix.python }}
          path: barter-python/target/wheels/*.whl

  build-sdist:
    name: "Build source distribution"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install maturin
        run: python -m pip install --upgrade pip maturin
        working-directory: barter-python

      - name: Build source distribution
        run: |
          maturin sdist
        working-directory: barter-python

      - name: Upload sdist artifact
        uses: actions/upload-artifact@v4
        with:
          name: barter-python-sdist
          path: barter-python/target/wheels/*.tar.gz

  publish:
    name: "Publish to PyPI"
    runs-on: ubuntu-latest
    needs: [build, build-sdist]
    if: startsWith(github.ref, 'refs/tags/v') && secrets.PYPI_API_TOKEN != ''

    steps:
      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.10.3
        with:
          packages-dir: dist
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true

  test:
    name: "Test wheels (${{ matrix.os }} | py${{ matrix.python }})"
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-13, windows-latest]
        python: ["3.9", "3.11", "3.12"]

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Download wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: barter-python-${{ matrix.os }}-py${{ matrix.python }}
          path: dist

      - name: Install wheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install dist/*.whl

      - name: Run basic import test
        run: |
          python -c "import barter_python; print('Import successful')"

      - name: Run smoke tests
        run: |
          python -c "
          from barter_python import ExchangeId, SubKind, Subscription
          exchange = ExchangeId.BINANCE_SPOT
          kind = SubKind.PUBLIC_TRADES
          subscription = Subscription(exchange, 'BTC', 'USDT', kind)
          print(f'Created subscription: {subscription}')
          print('Smoke test passed')
          "
